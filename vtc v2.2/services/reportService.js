const XLSX = require('xlsx');
const moment = require('moment');
const fs = require('fs-extra');
const chalk = require('chalk');
const { CONFIG } = require('../config/config');

class ReportService {
    constructor(excelService, fileService) {
        this.excelService = excelService;
        this.fileService = fileService;
        this.reportsDir = 'reportes';
        this.initializeDirectories();
    }

    /**
     * Inicializa los directorios necesarios
     */
    async initializeDirectories() {
        await fs.ensureDir(this.reportsDir);
    }

    /**
     * Genera un reporte completo en Excel
     * @param {number} targetMonth Mes objetivo (opcional)
     * @param {number} targetYear A√±o objetivo (opcional)
     * @returns {string} Ruta del archivo generado
     */
    async generateFullReport(targetMonth = null, targetYear = null) {
        try {
            console.log(chalk.blue('üìä Generando reporte completo...'));

            // Obtener todos los datos
            const vehicles = this.excelService.readExcelData();
            const processedNumbers = this.fileService.getProcessedNumbers();
            const errors = this.fileService.getErrors();

            // Analizar tel√©fonos
            const phoneAnalysis = this.analyzePhones(vehicles);

            // Analizar VTV renovadas
            const vtvAnalysis = this.analyzeVTVStatus(vehicles);

            // Analizar notificaciones enviadas
            const notificationAnalysis = this.analyzeNotifications(vehicles, processedNumbers);

            // Crear el workbook
            const workbook = XLSX.utils.book_new();

            // Hoja 1: Resumen ejecutivo
            const summaryData = this.createSummarySheet(vehicles, phoneAnalysis, vtvAnalysis, notificationAnalysis, targetMonth, targetYear);
            const summarySheet = XLSX.utils.json_to_sheet(summaryData);
            XLSX.utils.book_append_sheet(workbook, summarySheet, 'Resumen Ejecutivo');

            // Hoja 2: An√°lisis de tel√©fonos
            const phoneSheet = this.createPhoneAnalysisSheet(phoneAnalysis);
            XLSX.utils.book_append_sheet(workbook, phoneSheet, 'An√°lisis Tel√©fonos');

            // Hoja 3: Estado VTV
            const vtvSheet = this.createVTVStatusSheet(vtvAnalysis.details);
            XLSX.utils.book_append_sheet(workbook, vtvSheet, 'Estado VTV');

            // Hoja 4: Notificaciones enviadas
            const notificationSheet = this.createNotificationSheet(notificationAnalysis.details);
            XLSX.utils.book_append_sheet(workbook, notificationSheet, 'Notificaciones');

            // Hoja 5: Errores
            if (errors.length > 0) {
                const errorSheet = XLSX.utils.json_to_sheet(errors);
                XLSX.utils.book_append_sheet(workbook, errorSheet, 'Errores');
            }

            // Hoja 6: Distribuci√≥n mensual
            const distributionData = this.createDistributionSheet(vehicles);
            const distributionSheet = XLSX.utils.json_to_sheet(distributionData);
            XLSX.utils.book_append_sheet(workbook, distributionSheet, 'Distribuci√≥n Mensual');

            // Generar nombre de archivo con timestamp
            const timestamp = moment().format('YYYY-MM-DD_HH-mm-ss');
            const fileName = `Reporte_VTV_${timestamp}.xlsx`;
            const filePath = `${this.reportsDir}/${fileName}`;

            // Guardar archivo
            XLSX.writeFile(workbook, filePath);

            console.log(chalk.green(`‚úÖ Reporte generado: ${filePath}`));
            return filePath;

        } catch (error) {
            console.error(chalk.red('‚ùå Error generando reporte:'), error);
            throw error;
        }
    }

    /**
     * Analiza el estado de los tel√©fonos
     * @param {Array} vehicles Array de veh√≠culos
     * @returns {Object} An√°lisis de tel√©fonos
     */
    analyzePhones(vehicles) {
        const analysis = {
            total: vehicles.length,
            conTelefono: 0,
            sinTelefono: 0,
            telefonosValidos: 0,
            telefonosInvalidos: 0,
            nulos: 0,
            noFormateables: 0,
            details: []
        };

        vehicles.forEach(vehicle => {
            const hasPhone = vehicle.TelefonoOriginal && vehicle.TelefonoOriginal.toString().trim() !== '';
            const isFormatted = vehicle.Telefono && vehicle.Telefono.includes('@c.us');

            let status = '';
            let categoria = '';

            if (!hasPhone) {
                analysis.nulos++;
                status = 'NULO/VAC√çO';
                categoria = 'Sin tel√©fono';
            } else {
                analysis.conTelefono++;
                if (isFormatted) {
                    analysis.telefonosValidos++;
                    status = 'V√ÅLIDO';
                    categoria = 'Formateado correctamente';
                } else {
                    analysis.telefonosInvalidos++;
                    analysis.noFormateables++;
                    status = 'INV√ÅLIDO';
                    categoria = 'No se pudo formatear';
                }
            }

            analysis.details.push({
                Patente: vehicle.Patente,
                'Tel√©fono Original': vehicle.TelefonoOriginal || 'VAC√çO',
                'Tel√©fono Formateado': vehicle.Telefono || 'NO FORMATEADO',
                Estado: status,
                Categor√≠a: categoria,
                Marca: vehicle.Marca,
                Modelo: vehicle.Modelo,
                'Fecha Vencimiento': vehicle.FechaDeVencimiento
            });
        });

        analysis.sinTelefono = analysis.nulos;

        return analysis;
    }

    /**
     * Analiza el estado de las VTV (renovadas o no)
     * @param {Array} vehicles Array de veh√≠culos
     * @returns {Object} An√°lisis de VTV
     */
    analyzeVTVStatus(vehicles) {
        const now = moment();
        const analysis = {
            total: vehicles.length,
            vencidas: 0,
            vigentes: 0,
            proximasAVencer: 0, // Pr√≥ximas 30 d√≠as
            details: []
        };

        vehicles.forEach(vehicle => {
            const vencimiento = moment(vehicle.FechaDeVencimiento, CONFIG.DATE_FORMAT);
            let status = '';
            let diasRestantes = 0;

            if (vencimiento.isValid()) {
                diasRestantes = vencimiento.diff(now, 'days');

                if (diasRestantes < 0) {
                    analysis.vencidas++;
                    status = 'VENCIDA';
                } else if (diasRestantes <= 30) {
                    analysis.proximasAVencer++;
                    status = 'PR√ìXIMA A VENCER';
                } else {
                    analysis.vigentes++;
                    status = 'VIGENTE';
                }
            } else {
                status = 'FECHA INV√ÅLIDA';
            }

            analysis.details.push({
                Patente: vehicle.Patente,
                'Fecha Vencimiento': vehicle.FechaDeVencimiento,
                Estado: status,
                'D√≠as Restantes': diasRestantes,
                Marca: vehicle.Marca,
                Modelo: vehicle.Modelo,
                'Tel√©fono': vehicle.TelefonoOriginal || 'SIN TEL√âFONO'
            });
        });

        return analysis;
    }

    /**
     * Analiza las notificaciones enviadas
     * @param {Array} vehicles Array de veh√≠culos
     * @param {Array} processedNumbers Array de patentes procesadas
     * @returns {Object} An√°lisis de notificaciones
     */
    analyzeNotifications(vehicles, processedNumbers) {
        const analysis = {
            totalVehiculos: vehicles.length,
            notificados: processedNumbers.length,
            noNotificados: 0,
            porcentajeNotificado: 0,
            details: []
        };

        vehicles.forEach(vehicle => {
            const wasNotified = processedNumbers.includes(vehicle.Patente);
            const hasValidPhone = vehicle.Telefono && vehicle.Telefono.includes('@c.us');

            let status = '';
            let razon = '';

            if (wasNotified) {
                status = 'NOTIFICADO';
                razon = 'Notificaci√≥n enviada exitosamente';
            } else {
                status = 'NO NOTIFICADO';
                if (!hasValidPhone) {
                    razon = 'Sin tel√©fono v√°lido';
                } else {
                    razon = 'Pendiente de notificar o error en env√≠o';
                }
            }

            analysis.details.push({
                Patente: vehicle.Patente,
                'Estado Notificaci√≥n': status,
                Raz√≥n: razon,
                'Tel√©fono Original': vehicle.TelefonoOriginal || 'VAC√çO',
                'Tel√©fono V√°lido': hasValidPhone ? 'S√ç' : 'NO',
                'Fecha Vencimiento': vehicle.FechaDeVencimiento,
                Marca: vehicle.Marca,
                Modelo: vehicle.Modelo
            });
        });

        analysis.noNotificados = analysis.totalVehiculos - analysis.notificados;
        analysis.porcentajeNotificado = ((analysis.notificados / analysis.totalVehiculos) * 100).toFixed(2);

        return analysis;
    }

    /**
     * Crea la hoja de resumen ejecutivo
     */
    createSummarySheet(vehicles, phoneAnalysis, vtvAnalysis, notificationAnalysis, targetMonth, targetYear) {
        const summary = [
            { M√©trica: 'RESUMEN GENERAL', Valor: '', Descripci√≥n: '' },
            { M√©trica: 'Total de veh√≠culos en base', Valor: vehicles.length, Descripci√≥n: 'Cantidad total de registros' },
            { M√©trica: 'Fecha del reporte', Valor: moment().format('DD/MM/YYYY HH:mm'), Descripci√≥n: 'Momento de generaci√≥n' },
            { M√©trica: '', Valor: '', Descripci√≥n: '' },

            { M√©trica: 'AN√ÅLISIS DE TEL√âFONOS', Valor: '', Descripci√≥n: '' },
            { M√©trica: 'Con tel√©fono v√°lido', Valor: phoneAnalysis.telefonosValidos, Descripci√≥n: 'N√∫meros que se pudieron formatear para WhatsApp' },
            { M√©trica: 'Con tel√©fono inv√°lido', Valor: phoneAnalysis.telefonosInvalidos, Descripci√≥n: 'N√∫meros que no se pudieron formatear' },
            { M√©trica: 'Sin tel√©fono (nulos)', Valor: phoneAnalysis.nulos, Descripci√≥n: 'Registros sin n√∫mero de tel√©fono' },
            { M√©trica: 'Porcentaje v√°lidos', Valor: `${((phoneAnalysis.telefonosValidos / vehicles.length) * 100).toFixed(2)}%`, Descripci√≥n: 'Porcentaje de tel√©fonos v√°lidos' },
            { M√©trica: '', Valor: '', Descripci√≥n: '' },

            { M√©trica: 'ESTADO DE VTV', Valor: '', Descripci√≥n: '' },
            { M√©trica: 'VTV vencidas', Valor: vtvAnalysis.vencidas, Descripci√≥n: 'VTV que ya vencieron' },
            { M√©trica: 'VTV pr√≥ximas a vencer (30 d√≠as)', Valor: vtvAnalysis.proximasAVencer, Descripci√≥n: 'VTV que vencen en los pr√≥ximos 30 d√≠as' },
            { M√©trica: 'VTV vigentes', Valor: vtvAnalysis.vigentes, Descripci√≥n: 'VTV que a√∫n est√°n vigentes (m√°s de 30 d√≠as)' },
            { M√©trica: '', Valor: '', Descripci√≥n: '' },

            { M√©trica: 'NOTIFICACIONES', Valor: '', Descripci√≥n: '' },
            { M√©trica: 'Total notificados', Valor: notificationAnalysis.notificados, Descripci√≥n: 'Veh√≠culos a los que se envi√≥ notificaci√≥n' },
            { M√©trica: 'No notificados', Valor: notificationAnalysis.noNotificados, Descripci√≥n: 'Veh√≠culos sin notificar' },
            { M√©trica: 'Porcentaje notificado', Valor: `${notificationAnalysis.porcentajeNotificado}%`, Descripci√≥n: 'Porcentaje de veh√≠culos notificados' }
        ];

        if (targetMonth && targetYear) {
            const monthName = this.getMonthName(targetMonth);
            const periodVehicles = this.excelService.filterSpecificPeriod(vehicles, targetMonth, targetYear);
            summary.push(
                { M√©trica: '', Valor: '', Descripci√≥n: '' },
                { M√©trica: 'PER√çODO SELECCIONADO', Valor: '', Descripci√≥n: '' },
                { M√©trica: 'Mes/A√±o analizado', Valor: `${monthName} ${targetYear}`, Descripci√≥n: 'Per√≠odo espec√≠fico analizado' },
                { M√©trica: 'Veh√≠culos en per√≠odo', Valor: periodVehicles.length, Descripci√≥n: 'Veh√≠culos que vencen en el per√≠odo' },
                { M√©trica: 'Con tel√©fono v√°lido en per√≠odo', Valor: periodVehicles.filter(v => v.Telefono).length, Descripci√≥n: 'Del per√≠odo, cu√°ntos tienen tel√©fono v√°lido' }
            );
        }

        return summary;
    }

    /**
     * Crea la hoja de an√°lisis de tel√©fonos
     */
    createPhoneAnalysisSheet(phoneAnalysis) {
        const worksheet = XLSX.utils.json_to_sheet(phoneAnalysis.details);

        // Aplicar formato a las columnas
        const range = XLSX.utils.decode_range(worksheet['!ref']);
        for (let row = range.s.r; row <= range.e.r; row++) {
            const estadoCell = XLSX.utils.encode_cell({ r: row, c: 3 }); // Columna Estado
            if (worksheet[estadoCell]) {
                const cellValue = worksheet[estadoCell].v;
                if (cellValue === 'V√ÅLIDO') {
                    worksheet[estadoCell].s = { fill: { fgColor: { rgb: '90EE90' } } };
                } else if (cellValue === 'INV√ÅLIDO') {
                    worksheet[estadoCell].s = { fill: { fgColor: { rgb: 'FFB6C1' } } };
                } else if (cellValue === 'NULO/VAC√çO') {
                    worksheet[estadoCell].s = { fill: { fgColor: { rgb: 'FFFFE0' } } };
                }
            }
        }

        return worksheet;
    }

    /**
     * Crea la hoja de estado VTV
     */
    createVTVStatusSheet(vtvDetails) {
        return XLSX.utils.json_to_sheet(vtvDetails);
    }

    /**
     * Crea la hoja de notificaciones
     */
    createNotificationSheet(notificationDetails) {
        return XLSX.utils.json_to_sheet(notificationDetails);
    }

    /**
     * Crea la hoja de distribuci√≥n mensual
     */
    createDistributionSheet(vehicles) {
        const distribution = this.excelService.getMonthDistribution(vehicles);
        const distributionData = [];

        CONFIG.AVAILABLE_YEARS.forEach(year => {
            for (let month = 1; month <= 12; month++) {
                const count = distribution[year] && distribution[year][month] ? distribution[year][month] : 0;
                distributionData.push({
                    A√±o: year,
                    Mes: month,
                    'Nombre Mes': this.getMonthName(month),
                    'Cantidad Vencimientos': count
                });
            }
        });

        return distributionData;
    }

    /**
     * Obtiene el nombre del mes
     * @param {number} month N√∫mero del mes (1-12)
     * @returns {string} Nombre del mes
     */
    getMonthName(month) {
        const months = [
            'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
        ];
        return months[month - 1] || 'Mes inv√°lido';
    }

    /**
     * Genera un reporte espec√≠fico para un per√≠odo
     * @param {number} month Mes objetivo
     * @param {number} year A√±o objetivo
     * @returns {string} Ruta del archivo generado
     */
    async generatePeriodReport(month, year) {
        return await this.generateFullReport(month, year);
    }
}

module.exports = {
    ReportService
};